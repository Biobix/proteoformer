#!/bin/bash

### Alexander Koch
### 2013

###############
### FUNCTIONS
##
#

function header
{
    
    echo
    echo
    echo ' .d8888b. 888b    8888888888b.     .d8888b.        d8888888     888     8888888888b    888 .d8888b.  '
    echo 'd88P  Y88b8888b   888888   Y88b   d88P  Y88b      d88888888     888       888  8888b   888d88P  Y88b '
    echo 'Y88b.     88888b  888888    888   888    888     d88P888888     888       888  88888b  888888    888 '
    echo ' "Y888b.  888Y88b 888888   d88P   888           d88P 888888     888       888  888Y88b 888888        '
    echo '    "Y88b.888 Y88b8888888888P"    888          d88P  888888     888       888  888 Y88b888888  88888 '
    echo '      "888888  Y88888888          888    888  d88P   888888     888       888  888  Y88888888    888 '
    echo 'Y88b  d88P888   Y8888888          Y88b  d88P d8888888888888     888       888  888   Y8888Y88b  d88P '
    echo ' "Y8888P" 888    Y888888           "Y8888P" d88P     88888888888888888888888888888    Y888 "Y8888P88 '
    echo
    echo
    
}

function usage
{
    
    echo
    echo "usage: snp_calling_gatk_samtools -g path/to/GATKtoolkit/directory -p path/to/picard/toolkit/directory -e experiment_name -r path/to/reads -s path/to/reference/sequence -c path/to/chromosome/sequences/folder -o organism -t threads"
    echo
    
}


##################
### MAIN PROGRAM
##
#

trap "wait" TERM EXIT # deal with interruptions (like ctrl-c) by waiting for all threads to finish

T="$(date +%s)"

GATKDIR=
PICARDDIR=
EXPERIMENTNAME=
READS=
SEQUENCE=
CHROMOSOMESFOLDER=
ORGANISM=
MINCOVERAGE=3
MAXCOVERAGE=100
THREADS=1
MAXAF=0.95
LOWAF=0.3
HIGHAF=0.7
while [ "$1" != "" ]; do
    case $1 in
        -g | --gatk_dir )       shift
                                GATKDIR=$1
                                ;;
        -p | --picard_dir )     shift
                                PICARDDIR=$1
                                ;;
        -e | --experiment )     shift
                                EXPERIMENTNAME=$1
                                ;;
        -r | --reads )          shift
                                READS=$1
                                ;;
        -s | --sequence )       shift
                                SEQUENCE=$1
                                ;;
        --mincoverage )         shift
                                MINCOVERAGE=$1
                                ;;
        --maxcoverage )         shift
                                MAXCOVERAGE=$1
                                ;;
        -c | --chromosomes )    shift
                                CHROMOSOMESFOLDER=$1
                                ;;
        -o | --organism )       shift
                                ORGANISM=$1
                                ;;
        -t | --threads )        shift
                                THREADS=$1
                                ;;
        --max_af )              shift
                                MAXAF=$1
                                ;;
        --low_af )              shift
                                LOWAF=$1
                                ;;
        --high_af )             shift
                                HIGHAF=$1
                                ;;
        * )                     usage
                                exit
    esac
    shift
done

header

# print the command line arguments
echo "COMMAND LINE ARGUMENTS:"
echo " -g = $GATKDIR"
echo " -p = $PICARDDIR"
echo " -e = $EXPERIMENTNAME"
echo " -r = $READS"
echo " -s = $SEQUENCE"
echo " -c = $CHROMOSOMESFOLDER"
echo " -o = $ORGANISM"
echo " -t = $THREADS"
echo "SAMtools parameters:"
echo " --mincoverage = $MINCOVERAGE"
echo " --maxcoverage = $MAXCOVERAGE"
echo "allelic frequency cutoffs:"
echo " --max_af = $MAXAF"
echo " --low_af = $LOWAF"
echo " --high_af = $HIGHAF"
echo

# data pre-processing
#
Tpreprocessing="$(date +%s)"
# Remove duplicate reads
#
echo "preprocessing mapped reads"
echo
# sort the SAM file
echo "--> Picard SortSam..."
echo
java -jar "$PICARDDIR"/SortSam.jar I="$READS" O=tmp/ordered.bam SO=coordinate
echo "done!"
echo
# remove the duplicates
echo "--> Picard MarkDuplicates..."
echo
java -jar "$PICARDDIR"/MarkDuplicates.jar I=tmp/ordered.bam O=tmp/dedupped.bam M=tmp/metrics.txt
echo "done!"
echo
# add sample or read group information
echo "--> Picard AddOrReplaceReadGroups..."
echo
java -jar "$PICARDDIR"/AddOrReplaceReadGroups.jar I=tmp/dedupped.bam O=tmp/readGroup.bam RGLB=ribo_seq_lib RGPL=illumina RGPU=ribo_seq_run RGSM=ribo_seq
echo "done!"
echo
# index the BAM file
echo "--> Picard BuildBamIndex..."
echo
java -jar "$PICARDDIR"/BuildBamIndex.jar I=tmp/readGroup.bam
echo "done!"
echo
Tpreprocessing="$(($(date +%s)-Tpreprocessing))"
echo "preprocessing finished!"
printf "preprocessing runtime: %02d:%02d:%02d:%02d\n" "$((Tpreprocessing/86400))" "$((Tpreprocessing/3600%24))" "$((Tpreprocessing/60%60))" "$((Tpreprocessing%60))"
echo

# INDEL-based realignment
#
Trealignment="$(date +%s)"
echo "INDEL-based realignment"
java -jar "$GATKDIR"/GenomeAnalysisTK.jar -T RealignerTargetCreator -R "$SEQUENCE" -I tmp/readGroup.bam -o tmp/realigner.intervals --filter_reads_with_N_cigar
java -jar "$GATKDIR"/GenomeAnalysisTK.jar -T IndelRealigner -R "$SEQUENCE" -I tmp/readGroup.bam -targetIntervals tmp/realigner.intervals -o tmp/realigned.bam --filter_reads_with_N_cigar
Trealignment="$(($(date +%s)-Trealignment))"
echo
echo "realignment finished!"
printf "realignment runtime: %02d:%02d:%02d:%02d\n" "$((Trealignment/86400))" "$((Trealignment/3600%24))" "$((Trealignment/60%60))" "$((Trealignment%60))"
echo

# split the bam by chromosome to speed up the SNP calling
#
echo "splitting the BAM file by chromosome:"
echo
Tsplit="$(date +%s)"
if ORGANISM="mouse"; then
    # extract the chromosomes from the Ensembl SQLite database ENS_mmu_72.db
    query=$(sqlite3 SQLite/ENS_mmu_72.db "SELECT DISTINCT(name) FROM seq_region WHERE coord_system_id = 3")
    array=($(for i in $query; do echo $i; done))
    CHROMOSOMES=${array[@]:0:22}
elif ORGANISM="human"; then
    firstChr=$(seq 22)
    nextChr=('X' 'Y' 'MT')
    CHROMOSOMES=("${firstChr[@]}" "${nextChr[@]}")
elif ORGANISM="fruitfly"; then
    firstChr=$(seq 2 4)
    nextChr=('X' 'Y' 'MT')
    CHROMOSOMES=("${firstChr[@]}" "${nextChr[@]}")
fi

for chr in ${CHROMOSOMES[@]}
do
    echo "--> chromosome $chr"
    samtools view -b tmp/realigned.bam "$chr" -o tmp/realigned.chr"${chr}".bam
done
Tsplit="$(($(date +%s)-Tsplit))"
echo "splitting finished!"
printf "splitting runtime: %02d:%02d:%02d:%02d\n" "$((Tsplit/86400))" "$((Tsplit/3600%24))" "$((Tsplit/60%60))" "$((Tsplit%60))"
echo

# SNP calling with samtools
#
Tsamtools="$(date +%s)"
echo "running samtools..."
echo
# run mpileup on each chromosome separately
Tmpileup="$(date +%s)"
for chr in ${CHROMOSOMES[@]}
do
    echo "--> running mpileup for chromosome $chr"
    chrSequenceFile=$(find "$CHROMOSOMESFOLDER" -name "$chr.fa")
    samtools mpileup -uD -f "$chrSequenceFile" tmp/realigned.chr"${chr}".bam | bcftools view -bvcg - > tmp/snp.raw.chr"$chr".bcf &
    while (( $(jobs | wc -l) >= $THREADS )); do
        sleep 0.1
        jobs > /dev/null
    done
done
wait # wait for all threads to finish
Tmpileup="$(($(date +%s)-Tmpileup))"
echo
echo "mpileup finished!"
printf "mpileup runtime: %02d:%02d:%02d:%02d\n" "$((Tmpileup/86400))" "$((Tmpileup/3600%24))" "$((Tmpileup/60%60))" "$((Tmpileup%60))"
echo

# run vcfutils on each bcf file
#
echo "running vcfutils"
echo
Tvcfutils="$(date +%s)"
for chr in ${CHROMOSOMES[@]}
do
    echo "--> running vcfutils for chromosome $chr"
    bcftools view tmp/snp.raw.chr"$chr".bcf | vcfutils.pl varFilter -d "$MINCOVERAGE" -D "$MAXCOVERAGE" > tmp/snp.chr"$chr".vcf &
    while (( $(jobs | wc -l) >= $THREADS )); do
        sleep 0.1
        jobs > /dev/null
    done
done
wait # wait for all threads to finish
Tvcfutils="$(($(date +%s)-Tvcfutils))"
echo
echo "vcfutils finished!"
printf "vcfutils runtime: %02d:%02d:%02d:%02d\n" "$((Tvcfutils/86400))" "$((Tvcfutils/3600%24))" "$((Tvcfutils/60%60))" "$((Tvcfutils%60))"
echo

# store the vcf results in an SQLite database
#
TmergeSave="$(date +%s)"
echo "merging VCF files"

# merge the SNP files
perl mergeVCFfiles.pl "$MAXAF" "$LOWAF" "$HIGHAF"

echo "storing results in SQLite database"
echo
sqlite3 SQLite/"${EXPERIMENTNAME}"_results.db "CREATE TABLE snp_gatk_samtools(id INT PRIMARY KEY, chr VARCHAR, pos INT, ref CHAR, alt CHAR, af REAL)"
sqlite3 -separator ';' SQLite/"${EXPERIMENTNAME}"_results.db ".import tmp/allSNPsID.txt snp_gatk_samtools"
TmergeSave="$(($(date +%s)-TmergeSave))"
echo
echo "merging and saving finished!"
printf "merging and saving runtime: %02d:%02d:%02d:%02d\n" "$((TmergeSave/86400))" "$((TmergeSave/3600%24))" "$((TmergeSave/60%60))" "$((TmergeSave%60))"
echo

# clean up the tmp folder
#
echo "cleaning up the tmp/ folder"
rm tmp/*.vcf*
rm tmp/*.bcf
rm tmp/*.ba*
rm tmp/metrics.txt
rm tmp/aligned*
rm tmp/allSNPsID.txt
echo "all clean!"
echo

T="$(($(date +%s)-T))"
echo
echo "SNP calling finished!"
printf "total runtime: %02d:%02d:%02d:%02d\n" "$((T/86400))" "$((T/3600%24))" "$((T/60%60))" "$((T%60))"
echo