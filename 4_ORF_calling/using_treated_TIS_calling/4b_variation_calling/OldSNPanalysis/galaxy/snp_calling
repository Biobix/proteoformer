#!/bin/bash

#####################################
##	PROTEOFORMER: deep proteome coverage through ribosome profiling and MS integration
##
##	Copyright (C) 2014 G. Menschaert, J.Crapp√©, E. Ndah, A. Koch & S. Steyaert
##
##	This program is free software: you can redistribute it and/or modify
##	it under the terms of the GNU General Public License as published by
##	the Free Software Foundation, either version 3 of the License, or
##	(at your option) any later version.
##
##	This program is distributed in the hope that it will be useful,
##	but WITHOUT ANY WARRANTY; without even the implied warranty of
##	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##	GNU General Public License for more details.
##
##	You should have received a copy of the GNU General Public License
##	along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
## 	For more (contact) information visit http://www.biobix.be/PROTEOFORMER
#####################################


#
##
### SNP calling
###
### This script calls SNPs and INDELS in next-generation sequencing reads using samtools.
### (with or without removal of duplicate reads)
###
### Alexander Koch
### 2013
##
#
Tstart="$(date +%s)"
# check if samtools, bcftools, vcfutils.pl and the picard .jar files can be found
echo "checking tools installation..."
echo ""
which samtools &>/dev/null
if [ $? -ne 0 ]; then
    echo "Could not find samtools."
    echo "Please make sure samtools is installed and accessible through the PATH environment variable."
    exit
else
    echo "samtools ok..."
fi
which bcftools &>/dev/null
if [ $? -ne 0 ]; then
    echo "Could not find bcftools."
    echo "Please make sure bcftools is installed and accessible through the PATH environment variable."
    exit
else
    echo "bcftools ok..."

fi
which vcfutils.pl &>/dev/null
if [ $? -ne 0 ]; then
    echo "Could not find vcfutils.pl."
    echo "Please make sure bcftools, including vcfutils.pl, is installed and accessible through the PATH environment variable."
    exit
else
    echo "vcfutils.pl ok..."

fi
echo
# read input parameters
GALAXYDIR=
SQLITEIN=
SQLITEOUT=
REMOVEDUPLICATES=
SNPDBSELECTED=
SNPDB=
READS=
MINCOVERAGE=3
MAXCOVERAGE=100
HIGHAF=
LOWERAF=
UPPERAF=
while [ "$1" != "" ]; do
    case $1 in
        --galaxydir )           shift
                                GALAXYDIR=$1
                                ;;
        -s | --sqlitein )       shift
                                SQLITEIN=$1
                                ;;
        --sqliteout )           shift
                                SQLITEOUT=$1
                                ;;
        --removeduplicates )    shift
                                REMOVEDUPLICATES=$1
                                ;;
        --snpdbselected )       shift
                                SNPDBSELECTED=$1
                                ;;
        --snpdb )               shift
                                SNPDB=$1
                                ;;
        -r | --reads )          shift
                                READS=$1
                                ;;
        --mincoverage )         shift
                                MINCOVERAGE=$1
                                ;;
        --maxcoverage )         shift
                                MAXCOVERAGE=$1
                                ;;
        --high_af )             shift
                                HIGHAF=$1
                                ;;
        --lower_af )            shift
                                LOWERAF=$1
                                ;;
        --upper_af )            shift
                                UPPERAF=$1
                                ;;
    esac
    shift
done
# print the command line arguments
echo "----------------------"
echo " Samtools SNP calling"
echo "----------------------"
echo
echo "COMMAND LINE ARGUMENTS:"
echo " --galaxydir = $GALAXYDIR"
echo " --sqlitein = $SQLITEIN"
echo " --sqliteout = $SQLITEOUT"
echo " --removeduplicates = $REMOVEDUPLICATES"
echo " --snpdbselected = $SNPDBSELECTED"
echo " --snpdb = $SNPDB"
echo " --reads = $READS"
echo "SAMtools specific parameters:"
echo " --mincoverage = $MINCOVERAGE"
echo " --maxcoverage = $MAXCOVERAGE"
echo " allelic frequency cutoffs:"
echo " --high_af = $HIGHAF"
echo " --lower_af = $LOWERAF"
echo " --upper_af = $UPPERAF"
echo
# save the input variables to the arguments table
sqlite3 $SQLITEIN "INSERT INTO arguments VALUES ('mincoverage', '$MINCOVERAGE')"
sqlite3 $SQLITEIN "INSERT INTO arguments VALUES ('maxcoverage', '$MAXCOVERAGE')"
sqlite3 $SQLITEIN "INSERT INTO arguments VALUES ('high_af', '$HIGHAF')"
sqlite3 $SQLITEIN "INSERT INTO arguments VALUES ('lower_af', '$LOWERAF')"
sqlite3 $SQLITEIN "INSERT INTO arguments VALUES ('upper_af', '$UPPERAF')"
# extract extra input from the arguments table
IGENOMESROOT=`sqlite3 $SQLITEIN "SELECT value FROM arguments WHERE variable = 'igenomes_root' LIMIT 1"`
THREADS=`sqlite3 $SQLITEIN "SELECT value FROM arguments WHERE variable = 'nr_of_cores' LIMIT 1"`
ORGANISM=`sqlite3 $SQLITEIN "SELECT value FROM arguments WHERE variable = 'species' LIMIT 1"`
ENSEMBLDB=`sqlite3 $SQLITEIN "SELECT value FROM arguments WHERE variable = 'ens_db' LIMIT 1"`
ORGANISM_LATIN=
VERSION=
if [ "$ORGANISM" = "mouse" ]; then
    ORGANISM_LATIN="Mus_musculus"
    query=$(sqlite3 $ENSEMBLDB "SELECT DISTINCT(name) FROM seq_region WHERE coord_system_id = 3 AND LENGTH(name) < 3")
    CHROMOSOMES=($(for i in $query; do echo $i; done))
    VERSION=`sqlite3 $ENSEMBLDB "SELECT version FROM coord_system WHERE coord_system_id = 3"`
elif [ "$ORGANISM" = "human" ]; then
    ORGANISM_LATIN="Homo_sapiens"
    query=$(sqlite3 $ENSEMBLDB "SELECT DISTINCT(name) FROM seq_region WHERE coord_system_id = 2 AND LENGTH(name) < 3")
    CHROMOSOMES=($(for i in $query; do echo $i; done))
    VERSION=`sqlite3 $ENSEMBLDB "SELECT version FROM coord_system WHERE coord_system_id = 2"`
elif [ "$ORGANISM" = "fruitfly" ]; then
    ORGANISM_LATIN="Drosophila_melanogaster"
    query=$(sqlite3 $ENSEMBLDB "SELECT DISTINCT(name) FROM seq_region WHERE coord_system_id = 1 AND name NOT LIKE '%Het%' AND name NOT IN ('Uextra', 'U', 'dmel_mitochondrion_genome')")
    CHROMOSOMES=($(for i in $query; do echo $i; done))
    CHROMOSOMES=("${CHROMOSOMES[@]}" "M")
    VERSION=`sqlite3 $ENSEMBLDB "SELECT version FROM coord_system WHERE coord_system_id = 1"`
fi
echo "$ORGANISM = $ORGANISM_LATIN"
echo "version = $VERSION"
echo
# check if the reads file is in the SAM file format
# if it is, convert it to BAM
if [ ${READS: -4} = ".sam" ]; then
    echo "converting the SAM file to BAM..."
    samtools view -bS "$READS" -o aligned.out.bam
fi
echo "sorting..."
samtools sort aligned.out.bam aligned.sorted
samtools index aligned.sorted.bam
echo
if [ "$REMOVEDUPLICATES" = "true" ]; then
    echo "removing duplicate reads..."
    java net.sf.picard.sam.MarkDuplicates INPUT=aligned.sorted.bam OUTPUT=dedupped.bam METRICS_FILE=metrics.txt VALIDATION_STRINGENCY=LENIENT REMOVE_DUPLICATES=true ASSUME_SORTED=true
    java net.sf.picard.sam.BuildBamIndex INPUT=dedupped.bam
fi
echo
if [ "$SNPDBSELECTED" = "y" ]; then
    echo "uploading SNPdb data..."
    cp "${SNPDB}" snpdb.txt
    perl -p -i -e "s/^#.+?\n//g" snpdb.txt
    awk '{print $1,$2,$4,$5}' snpdb.txt > variants.txt
    perl -p -i -e "s/ /;/g" variants.txt
    perl "${GALAXYDIR}"/tools/proteoformer/splitVCFaltRecords.pl variants.txt
    # remove INDELS
    perl -p -i -e "s/^.+;[A-Z]{2,}.*\n$//g" split.txt
    sort split.txt | uniq > unique_split.txt
    perl "${GALAXYDIR}"/tools/proteoformer/snpIndexBuilder.pl unique_split.txt
    sqlite3 $SQLITEIN "DROP TABLE IF EXISTS snpdb"
    sqlite3 $SQLITEIN "CREATE TABLE snpdb(id INTEGER PRIMARY KEY, chr VARCHAR, pos INT, ref CHAR, alt CHAR)"
    sqlite3 -separator ';' $SQLITEIN ".import unique_split_indexed.txt snpdb"
    rm variants.txt split.txt unique_split.txt
    echo "adding MD tag to SAM file..."
    if [ "$REMOVEDUPLICATES" = "true" ]; then
        samtools calmd dedupped.bam "${IGENOMESROOT}"/"${ORGANISM_LATIN}"/Ensembl/"${VERSION}"/Sequence/WholeGenomeFasta/genome.fa > aligned.md.sam
    else
        samtools calmd aligned.sorted.bam "${IGENOMESROOT}"/"${ORGANISM_LATIN}"/Ensembl/"${VERSION}"/Sequence/WholeGenomeFasta/genome.fa > aligned.md.sam
    fi
    echo "extracting all sequence mismatches..."
    perl "${GALAXYDIR}"/tools/proteoformer/filterSAMfile.pl aligned.md.sam
    sort mismatches.txt | uniq > unique_mismatches.txt
    perl "${GALAXYDIR}"/tools/proteoformer/snpIndexBuilder.pl unique_mismatches.txt
    sqlite3 $SQLITEIN "DROP TABLE IF EXISTS mismatches"
    sqlite3 $SQLITEIN "CREATE TABLE mismatches(id INTEGER PRIMARY KEY, chr VARCHAR, pos INT, ref CHAR, alt CHAR)"
    sqlite3 -separator ';' $SQLITEIN ".import unique_mismatches_indexed.txt mismatches"
fi
echo
if [ $THREADS -gt 1 ]; then
    echo "splitting the bam file by chromosome..."
    for chr in ${CHROMOSOMES[@]}
    do
        echo "chromosome ${chr}"
        if [ "$REMOVEDUPLICATES" = "true" ]; then
            samtools view -b dedupped.bam "$chr" -o aligned.sorted.chr"${chr}".bam
        else
            samtools view -b aligned.sorted.bam "$chr" -o aligned.sorted.chr"${chr}".bam
        fi
    done 
fi
echo
echo "running mpileup..."
if [ $THREADS -gt 1 ]; then
    for chr in ${CHROMOSOMES[@]}
    do
        chrSeq="${IGENOMESROOT}"/"${ORGANISM_LATIN}"/Ensembl/"${VERSION}"/Sequence/Chromosomes/"${chr}".fa
        samtools mpileup -u -t DP -f "${chrSeq}" aligned.sorted.chr"${chr}".bam | bcftools call -O b -cv - > snp.raw.chr"${chr}".bcf &
        while (( $(jobs | wc -l) >= $THREADS )); do
            sleep 0.1
            jobs > /dev/null
        done
    done
    wait # wait for all threads to finish
else
    if [ "$REMOVEDUPLICATES" = "true" ]; then
        samtools mpileup -u -t DP -f "${IGENOMESROOT}"/"${ORGANISM_LATIN}"/Ensembl/"${VERSION}"/Sequence/WholeGenomeFasta/genome.fa dedupped.bam | bcftools call -O b -cv - > snp.raw.bcf
    else
        samtools mpileup -u -t DP -f "${IGENOMESROOT}"/"${ORGANISM_LATIN}"/Ensembl/"${VERSION}"/Sequence/WholeGenomeFasta/genome.fa aligned.sorted.bam | bcftools call -O b -cv - > snp.raw.bcf
    fi
fi
echo
echo "running vcfutils..."
if [ $THREADS -gt 1 ]; then
    for chr in ${CHROMOSOMES[@]}
    do
        bcftools view snp.raw.chr"${chr}".bcf | vcfutils.pl varFilter -d "$MINCOVERAGE" -D "$MAXCOVERAGE" > snp.chr"${chr}".vcf &
        while (( $(jobs | wc -l) >= $THREADS )); do
            sleep 0.1
            jobs > /dev/null
        done
    done
    wait # wait for all threads to finish
    echo
    echo "merging vcf files..."
    touch all_variants.txt
    # concatenate the vcf files without the annotation lines (which start with "#")
    for chr in ${CHROMOSOMES[@]}
    do
        grep -v '^#' snp.chr"${chr}".vcf >> all_variants.txt
    done
else
    bcftools view snp.raw.bcf | vcfutils.pl varFilter -d "$MINCOVERAGE" -D "$MAXCOVERAGE" > all_variants_tmp.vcf
    grep -v '^#' all_variants_tmp.vcf > all_variants.txt
fi
echo
echo "filtering variants..."
# remove INDELS
perl -p -i -e "s/^.+INDEL;.+\n$//g" all_variants.txt
# remove unnecessary variant information, but keep the read depth and allelic frequency
perl -p -i -e "s/\tDP=(\d+).+AF\d*=(\d\.*\d*).+$/\t\1\t\2\t/g" all_variants.txt
perl -p -i -e "s/;[A-Z].+?\t/\t/g" all_variants.txt
# extract the columns we need: chromosome, position, reference, alternative, read depth & allelic frequency (filtered)
awk '{if ($8 > 0.95 || (0.3 < $8 && $8 < 0.7)) print $1,$2,$4,$5,$8,$9 }' all_variants.txt > filtered_variants.txt
perl -p -i -e "s/ /;/g" filtered_variants.txt
# split the variant entries with more than one alternative in separate records (eg record for alt=A,T ==> record for alt=A, record for alt=T)
perl "${GALAXYDIR}"/tools/proteoformer/splitVCFaltRecords.pl filtered_variants.txt
perl "${GALAXYDIR}"/tools/proteoformer/snpIndexBuilder.pl split.txt
echo
echo "saving result to SQLite database..."
sqlite3 $SQLITEIN "DROP TABLE IF EXISTS snp_samtools_only"
echo "creating table..."
sqlite3 $SQLITEIN "CREATE TABLE snp_samtools_only(id INTEGER PRIMARY KEY, chr VARCHAR, pos INT, ref CHAR, alt CHAR, dp INT, af REAL)"
echo "importing data..."
sqlite3 -separator ';' $SQLITEIN ".import split_indexed.txt snp_samtools_only"
echo
echo "checking SNPDB variable..."
if [ "$SNPDBSELECTED" = "y" ]; then
    echo "comparing the SNP calling results to SNPdb..."
    # remove the mismatches that were found using samtools
    sqlite3 $SQLITEIN "DELETE FROM mismatches WHERE id IN (SELECT snp_samtools_only.id FROM snp_samtools_only)"
    # find the mismatches that can be found in SNPdb
    sqlite3 $SQLITEIN "DROP TABLE IF EXISTS found_mismatches"
    sqlite3 $SQLITEIN "CREATE TABLE found_mismatches(id INTEGER PRIMARY KEY, chr VARCHAR, pos INT, ref CHAR, alt CHAR, dp INT, af REAL, new CHAR)"
    sqlite3 $SQLITEIN "INSERT INTO found_mismatches(id, chr, pos, ref, alt) SELECT mismatches.id, mismatches.chr, mismatches.pos, mismatches.ref, mismatches.alt FROM mismatches WHERE mismatches.id IN (SELECT snpdb.id FROM snpdb)"
    sqlite3 $SQLITEIN "UPDATE found_mismatches SET dp = 1"
    sqlite3 $SQLITEIN "UPDATE found_mismatches SET af = 0.5"
    sqlite3 $SQLITEIN "UPDATE found_mismatches SET new = 'm'"
    # for the samtools SNPs, find the SNPs that can be found in SNPdb and those that can't
    sqlite3 $SQLITEIN "DROP TABLE IF EXISTS existing_variants"
    sqlite3 $SQLITEIN "CREATE TABLE existing_variants(id INTEGER PRIMARY KEY, chr VARCHAR, pos INT, ref CHAR, alt CHAR, dp INT, af REAL)"
    sqlite3 $SQLITEIN "INSERT INTO existing_variants SELECT snp_samtools_only.* FROM snp_samtools_only WHERE snp_samtools_only.id IN (SELECT snpdb.id FROM snpdb)"
    sqlite3 $SQLITEIN "ALTER TABLE existing_variants ADD COLUMN new CHAR"
    sqlite3 $SQLITEIN "UPDATE existing_variants SET new = 'n'"
    sqlite3 $SQLITEIN "DROP TABLE IF EXISTS new_variants"
    sqlite3 $SQLITEIN "CREATE TABLE new_variants(id INTEGER PRIMARY KEY, chr VARCHAR, pos INT, ref CHAR, alt CHAR, dp INT, af REAL)"
    sqlite3 $SQLITEIN "INSERT INTO new_variants SELECT * FROM snp_samtools_only"
    sqlite3 $SQLITEIN "DELETE FROM new_variants WHERE id IN (SELECT existing_variants.id FROM existing_variants)"
    sqlite3 $SQLITEIN "ALTER TABLE new_variants ADD COLUMN new CHAR"
    sqlite3 $SQLITEIN "UPDATE new_variants SET new = 'y'"
    # merge all the results together
    sqlite3 $SQLITEIN "DROP TABLE IF EXISTS snp_samtools"
    sqlite3 $SQLITEIN "CREATE TABLE snp_samtools(id INTEGER PRIMARY KEY, chr VARCHAR, pos INT, ref CHAR, alt CHAR, dp INT, af REAL, new CHAR)"
    sqlite3 $SQLITEIN "INSERT INTO snp_samtools SELECT * FROM new_variants"
    sqlite3 $SQLITEIN "INSERT INTO snp_samtools SELECT * FROM existing_variants"
    sqlite3 $SQLITEIN "INSERT INTO snp_samtools SELECT * FROM found_mismatches"
    # check the number of SNPs per transcript and filter out SNPs when there are too many in one transcript
    sqlite3 -csv $ENSEMBLDB "SELECT stable_id, seq_region_id, seq_region_start, seq_region_end FROM transcript" > transcript.csv
    sqlite3 $SQLITEIN "DROP TABLE IF EXISTS transcript"
    sqlite3 $SQLITEIN "CREATE TABLE transcript (stable_id VARCHAR, seq_region_id INT, seq_region_start INT, seq_region_end INT)"
    sqlite3 -separator ',' $SQLITEIN ".import transcript.csv transcript"
    sqlite3 -csv $ENSEMBLDB "SELECT seq_region_id, name FROM seq_region" > seq_region.csv
    sqlite3 $SQLITEIN "DROP TABLE IF EXISTS seq_region"
    sqlite3 $SQLITEIN "CREATE TABLE seq_region (seq_region_id INT, name VARCHAR)"
    sqlite3 -separator ',' $SQLITEIN ".import seq_region.csv seq_region"
    sqlite3 $SQLITEIN "DROP TABLE IF EXISTS transcript_snp"
    sqlite3 $SQLITEIN "CREATE TABLE transcript_snp (stable_id VARCHAR, seq_region_id INT, seq_region_start INT, seq_region_end INT, snp_count_all INT, snp_count_samtools INT, snp_count_mismatches INT)"
    sqlite3 $SQLITEIN "INSERT INTO transcript_snp(stable_id, seq_region_id, seq_region_start, seq_region_end) SELECT * FROM transcript"
    sqlite3 $SQLITEIN "CREATE INDEX transcript_chr_index ON transcript_snp (seq_region_id)"
    sqlite3 $SQLITEIN "CREATE INDEX transcript_start_index ON transcript_snp (seq_region_start)"
    sqlite3 $SQLITEIN "CREATE INDEX transcript_end_index ON transcript_snp (seq_region_end)"
    sqlite3 $SQLITEIN "ALTER TABLE snp_samtools ADD COLUMN seq_region_id INT"
    sqlite3 $SQLITEIN "UPDATE snp_samtools SET seq_region_id = (SELECT seq_region.seq_region_id FROM seq_region WHERE seq_region.name = chr)"
    sqlite3 $SQLITEIN "CREATE INDEX snp_chr_index ON snp_samtools (seq_region_id)"
    sqlite3 $SQLITEIN "CREATE INDEX snp_pos ON snp_samtools (pos)"
    sqlite3 $SQLITEIN "UPDATE transcript_snp SET snp_count_all = (SELECT COUNT(*) FROM snp_samtools WHERE snp_samtools.seq_region_id = transcript_snp.seq_region_id AND snp_samtools.pos BETWEEN transcript_snp.seq_region_start AND transcript_snp.seq_region_end)"
    sqlite3 $SQLITEIN "UPDATE transcript_snp SET snp_count_samtools = (SELECT COUNT(*) FROM snp_samtools WHERE snp_samtools.new != 'm' AND snp_samtools.seq_region_id = transcript_snp.seq_region_id AND snp_samtools.pos BETWEEN transcript_snp.seq_region_start AND transcript_snp.seq_region_end)"
    sqlite3 $SQLITEIN "UPDATE transcript_snp SET snp_count_mismatches = (SELECT COUNT(*) FROM snp_samtools WHERE snp_samtools.new = 'm' AND snp_samtools.seq_region_id = transcript_snp.seq_region_id AND snp_samtools.pos BETWEEN transcript_snp.seq_region_start AND transcript_snp.seq_region_end)"
    # remove the mismatches that are with too many in one transcript
    sqlite3 $SQLITEIN "DROP TABLE IF EXISTS snp_to_remove"
    sqlite3 $SQLITEIN "CREATE TABLE snp_to_remove(stable_id VARCHAR, seq_region_id INT, seq_region_start INT, seq_region_end INT)"
    sqlite3 $SQLITEIN "INSERT INTO snp_to_remove SELECT stable_id, seq_region_id, seq_region_start, seq_region_end FROM transcript_snp WHERE snp_count_mismatches > 5"
    sqlite3 $SQLITEIN "DELETE FROM snp_samtools WHERE id IN (SELECT id FROM snp_samtools INNER JOIN snp_to_remove ON (snp_samtools.seq_region_id = snp_to_remove.seq_region_id AND snp_samtools.pos BETWEEN snp_to_remove.seq_region_start AND snp_to_remove.seq_region_end) WHERE snp_samtools.new = 'm')"
else
    sqlite3 $SQLITEIN "DROP TABLE IF EXISTS snp_samtools"
    sqlite3 $SQLITEIN "CREATE TABLE snp_samtools(id INTEGER PRIMARY KEY, chr VARCHAR, pos INT, ref CHAR, alt CHAR, dp INT, af REAL)"
    sqlite3 $SQLITEIN "INSERT INTO snp_samtools SELECT * FROM snp_samtools_only"
    sqlite3 $SQLITEIN "ALTER TABLE snp_samtools ADD COLUMN new CHAR"
    sqlite3 $SQLITEIN "UPDATE snp_samtools SET new = 'y'"
fi
# clean up the database
sqlite3 $SQLITEIN "DROP TABLE IF EXISTS snp_samtools_only"
sqlite3 $SQLITEIN "DROP TABLE IF EXISTS new_variants"
sqlite3 $SQLITEIN "DROP TABLE IF EXISTS existing_variants"
sqlite3 $SQLITEIN "DROP TABLE IF EXISTS found_mismatches"
sqlite3 $SQLITEIN "DROP TABLE IF EXISTS mismatches"
sqlite3 $SQLITEIN "DROP TABLE IF EXISTS snp_to_remove"
sqlite3 $SQLITEIN "DROP TABLE IF EXISTS transcript_snp"
sqlite3 $SQLITEIN "DROP TABLE IF EXISTS transcript"
sqlite3 $SQLITEIN "DROP TABLE IF EXISTS seq_region"
sqlite3 $SQLITEIN "DROP TABLE IF EXISTS snpdb"
mv $SQLITEIN $SQLITEOUT
echo
echo "done!"
echo
Tend="$(($(date +%s)-Tstart))"
printf "total runtime: %02d:%02d:%02d:%02d\n" "$((Tend/86400))" "$((Tend/3600%24))" "$((Tend/60%60))" "$((Tend%60))"