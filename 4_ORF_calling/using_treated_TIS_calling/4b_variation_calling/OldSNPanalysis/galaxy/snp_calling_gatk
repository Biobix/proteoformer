#!/bin/bash

#
##
### SNP calling
###
### This script calls SNPs and INDELS in next-generation sequencing reads using the Genome Analysis ToolKit.
### (with or without removal of duplicate reads)
###
### Alexander Koch
### 2013
##
#

Tstart="$(date +%s)"

SQLITEDB=
SQLITEDBOUT=
REMOVEDUPLICATES=
READS=
PLATFORM=
HIGHAF=
LOWERAF=
UPPERAF=
DMQ=
STANDCALLCONF=
STANDEMITCONF=
DCOV=
MINMAPPINGQ=

while [ "$1" != "" ]; do
    case $1 in
        -s | --sqlitedb )       shift
                                SQLITEDB=$1
                                ;;
        -o | --sqlitedb_out )   shift
                                SQLITEDB=$1
                                ;;
        --removeduplicates )    shift
                                REMOVEDUPLICATES=$1
                                ;;
        -r | --reads )          shift
                                READS=$1
                                ;;
        -p | --platform )       shift
                                PLATFORM=$1
                                ;;
        --high_af )             shift
                                HIGHAF=$1
                                ;;
        --lower_af )            shift
                                LOWERAF=$1
                                ;;
        --upper_af )            shift
                                UPPERAF=$1
                                ;;
        --dmq )                 shift
                                DMQ=$1
                                ;;
        --stand_call_conf )     shift
                                STANDCALLCONF=$1
                                ;;
        --stand_emit_conf )     shift
                                STANDEMITCONF=$1
                                ;;
        --dcov )                shift
                                DCOV=$1
                                ;;
        --min_mapping_quality ) shift
                                MINMAPPINGQ=$1
                                ;;
    esac
    shift
done
# print the command line arguments
echo "------------------"
echo " GATK SNP calling"
echo "------------------"
echo
echo "COMMAND LINE ARGUMENTS:"
echo " -s = $SQLITEDB"
echo " -o = $SQLITEDBOUT"
echo " --removeduplicates = $REMOVEDUPLICATES"
echo " -r = $READS"
echo " -p = $PLATFORM"
echo "GATK specific parameters:"
echo " --dmq = $DMQ"
echo " --stand_call_conf = $STANDCALLCONF"
echo " --stand_emit_conf = $STANDEMITCONF"
echo " --dcov = $DCOV"
echo " --min_mapping_quality = $MINMAPPINGQ"
echo " allelic frequency cutoffs:"
echo " --high_af = $HIGHAF"
echo " --lower_af = $LOWERAF"
echo " --upper_af = $UPPERAF"
echo
echo "converting the SAM file to BAM, sorting it and splitting the BAM file in chromosomes..."
samtools view -bS "$READS" -o aligned.out.bam
samtools sort aligned.out.bam aligned.sorted
samtools index aligned.sorted.bam
echo
if [ $REMOVEDUPLICATES = "true" ]; then
    echo "removing duplicate reads..."
    echo
    java -jar /usr/bin/picard/MarkDuplicates.jar INPUT=aligned.sorted.bam OUTPUT=dedupped.bam METRICS_FILE=metrics.txt VALIDATION_STRINGENCY=LENIENT REMOVE_DUPLICATES=true ASSUME_SORTED=true
    java -jar /usr/bin/picard/BuildBamIndex.jar INPUT=dedupped.bam
fi
echo
#ORGANISM=`sqlite3 $SQLITEDB "SELECT species FROM arguments"`
ORGANISM=mouse
ORGANISM_LATIN=
if [ $ORGANISM == "mouse" ]; then
    ORGANISM_LATIN="Mus_musculus"
    firstChr=$(seq 19)
    nextChr=('X' 'Y' 'MT')
    CHROMOSOMES=("${firstChr[@]}" "${nextChr[@]}")
elif [ $ORGANISM == "human" ]; then
    ORGANISM_LATIN="Homo_sapiens"
    firstChr=$(seq 22)
    nextChr=('X' 'Y' 'MT')
    CHROMOSOMES=("${firstChr[@]}" "${nextChr[@]}")
elif [ $ORGANISM == "fruitfly" ]; then
    ORGANISM_LATIN="Drosophila_melanogaster"
    firstChr=$(seq 2 4)
    nextChr=('X' 'Y' 'MT')
    CHROMOSOMES=("${firstChr[@]}" "${nextChr[@]}")
fi
echo "$ORGANISM = $ORGANISM_LATIN"
SEQUENCE=/home/galaxy/data/igenomes/"${ORGANISM_LATIN}"/Ensembl/GRCm38/Sequence/WholeGenomeFasta/genome.fa
echo
echo "adding sample or read group information..."
echo
#SAMPLE_NAME=`sqlite3 $SQLITEDB "SELECT run_name FROM arguments"`
SAMPLE_NAME=test_name
echo "sample name = $SAMPLE_NAME"
if [ $REMOVEDUPLICATES = "true" ]; then
    java -jar /usr/bin/picard/AddOrReplaceReadGroups.jar I=dedupped.bam O=readGroup.bam RGLB=seq_lib RGPL="$PLATFORM" RGPU=platform_unit RGSM="$SAMPLE_NAME"
else
    java -jar /usr/bin/picard/AddOrReplaceReadGroups.jar I=aligned.sorted.bam O=readGroup.bam RGLB=seq_lib RGPL="$PLATFORM" RGPU=platform_unit RGSM="$SAMPLE_NAME"
fi
echo
echo "indexing the bam file..."
java -jar /usr/bin/picard/BuildBamIndex.jar I=readGroup.bam
echo
echo "INDEL-based realignment..."
java -jar /usr/bin/GATK/GenomeAnalysisTK.jar -T RealignerTargetCreator -R "$SEQUENCE" -I readGroup.bam -o realigner.intervals --filter_reads_with_N_cigar
java -jar /usr/bin/GATK/GenomeAnalysisTK.jar -T IndelRealigner -R "$SEQUENCE" -I readGroup.bam -targetIntervals realigner.intervals -o realigned.bam --filter_reads_with_N_cigar
echo
echo "reassigning mapping quality..."
java -jar /usr/bin/GATK/GenomeAnalysisTK.jar -T PrintReads -I realigned.bam -o reassignedMAPQ.bam -R "$SEQUENCE" -rf ReassignMappingQuality -DMQ "$DMQ"
echo
echo "calling variants..."
echo
java -jar /usr/bin/GATK/GenomeAnalysisTK.jar -T HaplotypeCaller -R "$SEQUENCE" -I reassignedMAPQ.bam -o rawVariants.vcf -stand_call_conf "$STANDCALLCONF" -stand_emit_conf "$STANDEMITCONF" -dcov "$DCOV" --min_mapping_quality_score "$MINMAPPINGQ"
echo
echo "filtering variants..."
touch filtered_vcf.txt
grep -v '^#' rawVariants.vcf >> rawVariants.txt
# remove unnecessary variant information
perl -p -i -e "s/\tDP=.+AF\d*=/\t/g" rawVariants.txt
perl -p -i -e "s/;[A-Z].+?\t/\t/g" rawVariants.txt
# extract the columns we need: chromosome, position, reference, alternative & allelic frequency (filtered)
awk '{if ($8 > 0.95 || (0.3 < $8 && $8 < 0.7)) print $1,$2,$4,$5,$8 }' rawVariants.txt > filtered_vcf.txt
perl -p -i -e "s/ /;/g" filtered_vcf.txt
echo
echo "saving result to SQLite database..."
sqlite3 $SQLITEDBOUT "DROP TABLE IF EXISTS temp_snp_gatk"
sqlite3 $SQLITEDBOUT "CREATE TABLE temp_snp_gatk(chr VARCHAR, pos INT, ref CHAR, alt CHAR, af REAL)"
sqlite3 $SQLITEDBOUT "DROP TABLE IF EXISTS snp_gatk"
sqlite3 $SQLITEDBOUT "CREATE TABLE snp_gatk(id INTEGER PRIMARY KEY AUTOINCREMENT, chr VARCHAR, pos INT, ref CHAR, alt CHAR, af REAL)"
sqlite3 -separator ';' $SQLITEDBOUT ".import filtered_vcf.txt temp_snp_gatk"
sqlite3 $SQLITEDBOUT "INSERT INTO snp_gatk(chr, pos, ref, alt, af) SELECT * FROM temp_snp_gatk"
sqlite3 $SQLITEDBOUT "DROP TABLE temp_snp_gatk"
echo
echo "done!"
echo
Tend="$(($(date +%s)-Tstart))"
echo
printf "total runtime: %02d:%02d:%02d:%02d\n" "$((Tend/86400))" "$((Tend/3600%24))" "$((Tend/60%60))" "$((Tend%60))"